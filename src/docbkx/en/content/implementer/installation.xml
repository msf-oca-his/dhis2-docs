<?xml version='1.0' encoding='UTF-8'?>
 <chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
          xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mth="http://www.w3.org/1998/Math/MathML"
         xmlns:db="http://docbook.org/ns/docbook"
         xml:id="installation">
  <title>Installation</title>
  <para>The installation chapter provides information on how to install DHIS2 in various contexts, including online central server, offline local network, standalone application and self-contained package called DHIS2 Live.</para>
  <section xml:id="install_introduction">
    <title>Introduction</title>  
  <para>DHIS2 runs on all platforms for which there exists a Java Runtime Environment version 8 or
      higher, which includes most popular operating systems such as Windows, Linux and Mac. DHIS2
      also runs on many relational database systems such as PostgreSQL, MySQL, H2 and Derby. DHIS2
      is packaged as a standard Java Web Archive (WAR-file) and thus runs on any Servlet containers
      such as Tomcat and Jetty.</para>
  <para>The DHIS2 team recommends Ubuntu 16.04 LTS operating system, PostgreSQL database system and
      Tomcat Servlet container as the preferred environment for server installations.</para>
  <para>This chapter provides a guide for setting up the above technology stack. It should however
      be read as a guide for getting up and running and not as an exhaustive documentation for the
      mentioned environment. We refer to the official Ubuntu, PostgreSQL and Tomcat documentation
      for in-depth reading. </para>
    <para>The <link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="https://github.com/dhis2/dhis2-tools">dhis2-tools</link> Ubuntu package
      automates many of the tasks described in the guide below and is highly reccomended for most
      users, especially those who are not familiar with the command line or administration of
      servers. It is described in detail in a seperate chapter in this book. </para>
  </section>
  <section xml:id="install_server_specifications">
    <title>Server specifications</title>
    <para>DHIS2 is a database intensive application and requires that your server has an
      appropriate amount of RAM, number of CPU cores and a fast disk. These recommendations should
      be considered as rules-of-thumb and not exact measures. DHIS2 scales linearly on the amount
      of RAM and number of CPU cores so the more you can afford, the better the application will
      perform.</para>
    <itemizedlist>
      <listitem>
        <para>RAM: At least 1 GB memory per 1 million captured data records per month or per 1000
          concurrent users. At least 4 GB for a small instance, 12 GB for a medium instance.</para>
      </listitem>
      <listitem>
        <para>CPU cores: 4 CPU cores for a small instance, 8 CPU cores for a medium or large
          instance.</para>
      </listitem>
      <listitem>
        <para>Disk: Ideally use an SSD. Otherwise use a 7200 rpm disk. Minimum read speed is 150
          Mb/s, 200 Mb/s is good, 350 Mb/s or better is ideal.  In terms of disk space, at least 60
          GB is reccomended, but will depend entirely on the amount of data which is contained in
          the data value tables. Analytics tables require a significant amount of disk space. Plan
          ahead and ensure that your server can be upgraded with more disk space as it becomes
          needed.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="install_basic_server_setup">
    <title>Basic server setup</title>
    <para>This section describes how to set up a server instance of DHIS2 on Ubuntu 14.04 64 bit
      with PostgreSQL as database system and Tomcat as Servlet container. This guide is not meant to
      be a step-by-step guide per se, but rather to serve as a reference to how DHIS2 can be
      deployed on a server. There are many possible deployment strategies, which will differ
      depending on the operating system and database you are using, and other factors. The term
        <emphasis role="italic">invoke</emphasis> refers to executing a given command in a terminal. </para>
    <para>For a national server the recommended configuration is a quad-core 2 Ghz processor or
      higher and 12 Gb RAM or higher. Note that a 64 bit operating system is required for utilizing
      more than 4 Gb of RAM. </para>
    <para>For this guide we assume that 8 Gb RAM is allocated for PostgreSQL and 8 GB RAM is
      allocated for Tomcat/JVM, and that a 64-bit operating system is used. <emphasis role="italic">If you are running a different configuration please adjust the suggested values accordingly!</emphasis> We recommend that the available memory is split roughly equally
      between the database and the JVM. Remember to leave some of the physical memory to the
      operating system for it to perform its tasks, for instance around 2 GB. The steps marked as
        <emphasis role="italic">optional</emphasis>, like the step for performance tuning, can be
      done at a later stage.</para>
    <section xml:id="install_creating_user">
      <title>Creating a user to run DHIS2</title>
      <para>You should create a dedicated user for running DHIS2 - it is not recommended to run as
        the root user. Create a new user called dhis by invoking:</para>
      <screen>useradd -d /home/dhis -m dhis -s /bin/bash</screen>
      <para>Then make the user able to perform operations temporarily as root user by
        invoking:</para>
      <screen>usermod -G sudo dhis</screen>
      <para>Then to set the password for your account invoke:</para>
      <screen>passwd dhis</screen>
      <para>Make sure you set a strong password with at least 15 random characters. You might want
        to disable remote login for the root account for improved security by invoking:</para>
      <screen>sudo passwd -l root</screen>
    </section>
    <section xml:id="install_creating_config_directory">
      <title>Creating the configuration directory</title>
      <para>Start by creating a suitable directory for the DHIS2 configuration files. This
        directory will also be used for apps, files and log files. An example directory could
        be:<screen>/home/dhis/config</screen></para>
      <para>DHIS2 will look for an environment variable called <emphasis>DHIS2_HOME</emphasis> to
        locate the DHIS2 configuration directory. This directory will be referred to as
          <emphasis>DHIS2_HOME</emphasis> in this installation guide. We will define the environment
        variable in a later step in the installation process.</para>
    </section>
    <section xml:id="install_setting_server_tz">
      <title>Setting server time zone and locale (optional)</title>
      <para>It may be necessary to reconfigure the time zone of the server to match the time zone of
        the location which the DHIS2 server will be covering. If you are using a virtual private
        server, the default time zone may not correspond to the time zone of your DHIS2 location.
        You can easily reconfigure the time zone by invoking the below and following the
        instructions.</para>
      <screen>sudo dpkg-reconfigure tzdata</screen>
      <para>PostgreSQL is sensitive to locales so you might have to install your locale first. To
        check existing locales and install new ones (e.g. Norwegian):</para>
      <screen>locale -a
sudo locale-gen nb_NO.UTF-8</screen>
    </section>
    <section xml:id="install_postgresql_installation">
      <title>PostgreSQL installation</title>
      <para>Install PostgreSQL 9.4 by invoking:</para>
      <screen>sudo apt-get install postgresql-9.4</screen>
      <para><emphasis>Note:</emphasis> Alternatively, you can consult the PostgreSQL documentation to
        install the latest version from the PostgreSQL APT repository:
          <link>http://www.postgresql.org/download/linux/ubuntu/</link>.</para>
      <para>Switch to the postgres user by invoking:</para>
      <screen>sudo su postgres</screen>
      <para>Create a non-privileged user called <emphasis role="italic">dhis</emphasis> by
        invoking:</para>
      <screen>createuser -SDRP dhis</screen>
      <para>Enter a secure password at the prompt. Create a database by invoking:</para>
      <screen>createdb -O dhis dhis2</screen>
      <para>Return to your session by invoking <code>exit</code> You now have a PostgreSQL user
        called <emphasis role="italic">dhis</emphasis> and a database called <emphasis role="italic"
          >dhis2</emphasis>.</para>
    </section>
    <section xml:id="install_postgis_installation">
      <title>PostGIS installation</title>
      <para>In order to take advantage of the GIS clustering functionality introduced in DHIS2.23
        you must install the PostGIS extender on the server. After installing the extender, PostGIS
        will be installed in the database automatically when DHIS2 is started. Install PostGIS on
        the server by invoking:</para>
      <screen>sudo apt-get install postgresql-9.4 postgresql-9.4-postgis-2.2 postgresql-contrib-9.4</screen>
    </section>
    <section xml:id="install_postgresql_performance_tuning">
      <title>PostgreSQL performance tuning (optional)</title>
      <para>Tuning PostgreSQL is necessary to achieve a high-performing system but is optional in
        terms of getting DHIS2 to run. PostgreSQL is configured and tuned through the <emphasis
          role="italic">postgresql.conf</emphasis> file which can be edited like this:</para>
      <para><screen>sudo nano /etc/postgresql/9.4/main/postgresql.conf</screen></para>
      <para>and set the following properties:</para>
      <para>
        <screen>max_connections = 200</screen>
      </para>
      <para>Determines maximum number of connections which PostgreSQL will allow.</para>
      <para><screen>shared_buffers = 3200MB</screen></para>
      <para>Determines how much memory should be allocated exclusively for PostgreSQL caching. This
      setting controls the size of the kernel shared memory which should be reserved for PostgreSQL.
      Should be set to around 40% of total memory dedicated for PostgreSQL.</para>
      <para><screen>work_mem = 20MB</screen></para>
      <para>Determines the amount of memory used for internal sort and hash operations. This setting
      is per connection, per query so a lot of memory may be consumed if raising this too high.
      Setting this value correctly is essential for DHIS2 aggregation performance.</para>
      <para><screen>maintenance_work_mem = 512MB</screen></para>
      <para>Determines the amount of memory PostgreSQL can use for maintenance operations such as
        creating indexes, running vacuum, adding foreign keys. Incresing this value might improve
        performance of index creation during the analytics generation processes.</para>
      <para><screen>effective_cache_size = 8000MB</screen></para>
      <para>An estimate of how much memory is available for disk caching by the operating system
        (not an allocation) and isdb.no used by PostgreSQL to determine whether a query plan will
        fit into memory or not. Setting it to a higher value than what is really available will
        result in poor performance. This value should be inclusive of the shared_buffers setting.
        PostgreSQL has two layers of caching: The first layer uses the kernel shared memory and is
        controlled by the shared_buffers setting. PostgreSQL delegates the second layer to the
        operating system disk cache and the size of available memory can be given with the
        effective_cache_size setting.</para>
      <para><screen>checkpoint_completion_target = 0.8</screen></para>
      <para>Sets the memory used for buffering during the WAL write process. Increasing this value might improve throughput in write-heavy systems.</para>
      <para><screen>synchronous_commit = off</screen></para>
      <para>Specifies whether transaction commits will wait for WAL records to be written to the disk before returning to the client or not. Setting this to off will improve performance considerably. It also implies that there is a slight delay between the transaction is reported successful to the client and it actually being safe, but the database state cannot be corrupted and this is a good alternative for performance-intensive and write-heavy systems like DHIS2.</para>
      <para><screen>wal_writer_delay = 10000ms</screen></para>
      <para>Specifies the delay between WAL write operations. Setting this to a high value will improve performance on write-heavy systems since potentially many write operations can be executed within a single flush to disk.</para>
      <para>Restart PostgreSQL by invoking <code>sudo /etc/init.d/postgresql restart</code></para>
    </section>
    <section xml:id="install_database_configuration">
      <title>Database configuration</title>
      <para>The database connection information is provided to DHIS2 through a configuration file
        called <emphasis role="italic">dhis.conf</emphasis>. Create this file and save it in the
          <emphasis>DHIS2_HOME</emphasis> directory. As an example this location could
        be:<screen>/home/dhis/config/dhis.conf</screen> A configuration file for PostgreSQL
        corresponding to the above setup has these properties: </para>
      <para><screen># Hibernate SQL dialect
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

# JDBC driver class
connection.driver_class = org.postgresql.Driver

# Database connection URL
connection.url = jdbc:postgresql:dhis2

# Database username
connection.username = dhis

# Database password
connection.password = xxxx

# Database schema behavior, can be validate, update, create, create-drop
connection.schema = update

# Encryption password (sensitive)
encryption.password = xxxx</screen></para>
      <para>The <emphasis role="italic">encryption.password</emphasis> property is the password used
        when encrypting and decrypting data in the database. Note that the password must not be
        changed once it has been set and data has been encrypted as the data can then no longer be
        decrypted. Remember to set a strong password of at least <emphasis role="bold">24
          characters</emphasis>.</para>
      <para>A common mistake is to have a white-space after the last property value so make sure
        there is no white-space at the end of any line. Also remember that this file contains the
        clear text password for your DHIS2 database so it needs to be protected from unauthorized
        access. To do this invoke the following command which ensures that only the dhis user which
        owns the file is allowed to read it:</para>
      <screen>chmod 0600 dhis.conf</screen>
    </section>
    <section xml:id="install_file_store_configuration">
      <title>File store configuration (optional)</title>
      <para>DHIS2 is capable of capturing and storing files. By default files will be stored on the
        file system of the server which runs DHIS2 in a <emphasis role="italic">files</emphasis>
        directory under the <emphasis role="italic">DHIS2_HOME</emphasis> external directory
        location.</para>
      <para>You can also configure DHIS2 to store files on cloud-based storage providers.
        Currently, AWS S3 is the only supported provider. To enable cloud-based storage you must
        define the following addtional properties in your <emphasis role="italic"
          >dhis.conf</emphasis> file:</para>
      <screen># File store provider. Currently 'filesystem' and 'aws-s3' are supported.
filestore.provider = filesystem

# Directory / bucket name. Refers to subdirectory in external directory on file system and bucket on AWS S3.
filestore.container = files

# The following configuration is applicable only on non-filesystem providers (AWS S3)

# Datacenter location. Not required but recommended for performance reasons.
filestore.location = eu-west-1

# Public identity / username
filestore.identity = xxxx

# Secret password (sensitive)
filestore.secret = xxxx</screen>
      <para>This configuration is an example reflecting the defaults and should be changed to fit
        your needs. In other words, you can omit it entirely if you plan to use the default values.
        If you want to use an external provider the last block of properties need to be defined, as
        well as the <emphasis role="italic">provider</emphasis> property being set to a supported
        provider (currently only AWS S3).</para>
      <para>For a production system the initial setup of the file store should be carefully
        considered as moving files across storage providers while keeping the integrity of the
        database references could be complex. Keep in mind that the contents of the file store might
        contain both sensitive and integral information and protecting access to the folder as well
        as making sure a backup plan is in place is recommended on a production
        implementation.</para>
      <para><emphasis role="italic">A note on external provider support: AWS S3 is the only
          supported provider at the moment but more providers are likely to be added, such as Google
          Cloud Store and Rackspace Cloud Files. Let the developers know if you have inquiries about
          adding support for more providers.</emphasis></para>
    </section>
    <section xml:id="install_google_service_account_configuration">
      <title>Google service account configuration (optional)</title>
      <para>DHIS2 can connect to various Google service APIs. For instance, the DHIS2 GIS
        component can utilize the Google Earth Engine API to load map layers. In order to provide
        API access tokens you must set up a Google service account and create a private key:</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>Create a Google service account. Please consult the <link
                xl:href="https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview"
              >Google identify platform</link> documentation.</para>
          </listitem>
          <listitem>
            <para>Visit the <link xl:href="https://console.cloud.google.com">Google cloud
                console</link> and go to API Manager > Credentials > Create credentials > Service
              account key. Select your service account and JSON as key type and click Create.</para>
          </listitem>
          <listitem>
            <para>Rename the JSON key to <emphasis>dhis-google-auth.json</emphasis>.</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>After downloading the key file, put the <emphasis>dhis-google-auth.json</emphasis> file
        in the DHIS2_HOME directory (the same location as the <emphasis>dhis.conf</emphasis> file).
        As an example this location could
        be:<screen>/home/dhis/config/dhis-google-auth.json</screen></para>
    </section>
    <section xml:id="install_java_installation">
      <title>Java installation</title>
      <para>Oracle Java 8 JDK is the recommended Java option as it provides the greatest operating
        system support including Ubuntu LTS 14.04. The <emphasis>webupd8team Java PPA</emphasis>
        provides the necessary packages.</para>
      <screen>sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer</screen>
      <para>Check that your installation is okay by invoking:</para>
      <screen>java -version</screen>
      <para>You can also ensure that the appropriate environment variables are set by installing this
        package:</para>
      <screen>sudo apt-get install oracle-java8-set-default</screen>
    </section>
    <section xml:id="install_tomcat_dhis2_installation">
      <title>Tomcat and DHIS2 installation</title>
      <para>To install the Tomcat servlet container we will utilize the Tomcat user package by
        invoking:</para>
      <screen>sudo apt-get install tomcat7-user</screen>
      <para>This package lets us easily create a new Tomcat instance. The instance will be created
        in the current directory. An appropriate location is the home directory of the dhis
        user:</para>
      <screen>tomcat7-instance-create tomcat-dhis</screen>
      <para>This will create an instance in a directory called <emphasis role="italic"
          >tomcat-dhis</emphasis>. Note that the tomcat7-user package allows for creating any number
        of dhis instances if that is desired.</para>
      <para>Next edit the file <emphasis role="italic">tomcat-dhis/bin/setenv.sh</emphasis> and add
        the lines below. The first line will set the location of your Java Runtime Environment, the
        second will dedicate memory to Tomcat and the third will set the location for where DHIS2
        will search for the <emphasis role="italic">dhis.conf</emphasis> configuration file. Please
        check that the path the Java binaries are correct as they might vary from system to system,
        e.g. on AMD systems you might see <emphasis role="italic">/java-7-openjdk-amd64</emphasis>
        Note that you should adjust this to your environment:</para>
      <para><screen>export JAVA_HOME=&apos;/usr/lib/jvm/java-8-oracle/&apos;
export JAVA_OPTS=&apos;-Xmx7500m -Xms4000m&apos;
export DHIS2_HOME=&apos;/home/dhis/config&apos;</screen></para>
      <para>The Tomcat configiration file is located in <emphasis role="italic"
          >tomcat-dhis/conf/server.xml</emphasis>. The element which defines the connection to DHIS
        is the <emphasis role="italic">Connector</emphasis> element with port 8080. You can change
        the port number in the Connector element to a desired port if necessary. If UTF-8 encoding
        of request data is needed, make sure that the <emphasis role="italic">URIEncoding</emphasis>
        attribute is set to <emphasis role="italic">UTF-8</emphasis>.</para>
      <screen>&lt;Connector port="8080" protocol="HTTP/1.1"
  connectionTimeout="20000"
  redirectPort="8443"
  URIEncoding="UTF-8" /></screen>
      <para>The next step is to download the DHIS2 WAR file and place it into the webapps directory
        of Tomcat. You can download the DHIS2 version 2.23 WAR release like this (replace 2.23 with
        your preferred version if necessary):</para>
      <screen>wget https://www.dhis2.org/download/releases/2.23/dhis.war</screen>
      <para>Move the WAR file into the Tomcat webapps directory. We want to call the WAR file
        ROOT.war in order to make it available at localhost directly without a context path:</para>
      <screen>mv dhis.war tomcat-dhis/webapps/ROOT.war</screen>
    </section>
    <section xml:id="install_running_dhis2">
      <title>Running DHIS2</title>
      <para>DHIS2 can now be started by invoking:</para>
      <screen>tomcat-dhis/bin/startup.sh</screen>
      <para>DHIS2 can be stopped by invoking:</para>
      <screen>tomcat-dhis/bin/shutdown.sh</screen>
      <para>To monitor the behavior of Tomcat the log is the primary source of information. The log
        can be viewed with the following command:</para>
      <screen>tail -f tomcat-dhis/logs/catalina.out</screen>
      <para>Assuming that the WAR file is called ROOT.war, you can now access your DHIS2 instance at
        the following URL:</para>
      <screen>http://localhost:8080</screen>
    </section>
    <section xml:id="install_starting_tomcat_boot_time">
      <title>Starting Tomcat at boot-time</title>
      <para>In certain situations a server might reboot unexpectedly. It is hence preferable to have
        Tomcat start automatically when the server starts. To achieve that the first step is to
        create init scripts. Create a new file called <code>tomcat</code> and paste the below
        content into it (adjust the HOME variable to your environment):</para>
      <screen>#!/bin/sh
#Tomcat init script

HOME=/home/dhis/tomcat/bin

case $1 in
start)
        sh ${HOME}/startup.sh
        ;;
stop)
        sh ${HOME}/shutdown.sh
        ;;
restart)
        sh ${HOME}/shutdown.sh
        sleep 5
        sh ${HOME}/startup.sh
        ;;
esac
exit 0</screen>
      <para>Move the script to the init script directory and make them executable by
        invoking:</para>
      <screen>sudo mv tomcat /etc/init.d
sudo chmod +x /etc/init.d/tomcat</screen>
      <para>Next make sure the tomcat init script will be invoked during system startup and
        shutdown:</para>
      <screen>sudo /usr/sbin/update-rc.d -f tomcat defaults 81</screen>
      <para>Tomcat will now be started at system startup and stopped at system shutdown. If you
        later need to revert this you can replace <code>defaults</code> with <code>remove</code> and
        invoke the above commands again.</para>
    </section>
  </section>
  <section xml:id="install_advanced_server_setup">
    <title>Advanced server setup</title>
    <para>This section describes optional, advanced aspects of the DHIS 2 installation which enables
      the system capability and performance.</para>
    <section xml:id="install_read_replica_configuration">
      <title>Read replica configuration</title>
      <para>DHIS 2 allows for utilizing read only replicas of the database. The purpose of this is
        to enhance the performance of database read queries and scale out beyond the capacity
        constraints of a single database. Read-heavy functionality such as analytics queries and
        event queries will benefit from this.</para>
      <para>This setup requires that you have created one or more replicated instances of the main
        DHIS 2 database. PostgreSQL achieves this through a concept referred to as
          <emphasis>streaming replication</emphasis>. Configuring read replicas for PostgreSQL is
        not covered in this guide.</para>
      <para>Read replicas can be defined in the <emphasis>dhis.conf</emphasis> configuration file.
        You can specify up to 5 read replicas per DHIS 2 instance. Each read replica is denoted with
        a number going from 1 to 5. The JDBC connection URL must be defined. The username and
        password can be specified, if not, the username and password for the main database instance
        will be used.</para>
      <para>The configuration for read replicas look like the below. Each replica is specified with
        the configuratio key <emphasis>readN</emphasis> prefix, where N refers to the replica
        number.<screen># Read replica 1 config

# Database connection URL, username and password
read1.connection.url = jdbc:postgresql://127.0.0.11/dhis2read1
read1.connection.username = dhis
read1.connection.password = dhis

# Read replica 2 config

# Database connection URL, username and password
read2.connection.url = jdbc:postgresql://127.0.0.12/dhis2read2
read2.connection.username = dhis
read2.connection.password = dhis</screen></para>
      <para>Note that you must your servlet container for the changes to take effect.</para>
    </section>
  </section>
  <section xml:id="install_reverse_proxy_configuration">
    <title>Reverse proxy configuration</title>
    <para>A reverse proxy is a proxy server that acts on behalf of a server. Using a reverse proxy in combination with a servlet container is optional but has many advantages:</para>
    <itemizedlist>
      <listitem>
        <para>Requests can be mapped and passed on to multiple servlet containers - this improves flexibility and makes it easier to run multiple instances of DHIS2 on the same server. It also makes it possible to change the internal server setup without affecting clients.</para>
      </listitem>
      <listitem>
        <para>The DHIS2 application can be run as a non-root user on a port different than 80 which reduces the consequences of session hijacking.</para>
      </listitem>
      <listitem>
        <para>The reverse proxy can  act as a single SSL server and be configured to inspect requests for malicious content, log requests and responses and provide non-sensitive error messages which will improve security.</para>
      </listitem>
    </itemizedlist>
    <section xml:id="install_basic_nginx_setup">
      <title>Basic nginx setup</title>
      <para>We recommend using <link xl:href="http://www.nginx.org">nginx</link>  as reverse proxy due to its low memory
        footprint and ease of use. To install invoke the following:</para>
      <screen>sudo apt-get install nginx</screen>
      <para>nginx can now be started, reloaded and stopped with the following commands:</para>
      <para><screen>sudo /etc/init.d/nginx start
sudo /etc/init.d/nginx reload
sudo /etc/init.d/nginx stop</screen></para>
      <para>Now that we have installed nginx we will now continue to configure regular proxying of
        requests to our Tomcat instance, which we assume runs at <emphasis role="italic"
          >http://localhost:8080</emphasis>. To configure nginx you can open the configuration file
        by invoking:</para>
      <screen>sudo nano /etc/nginx/nginx.conf</screen>
      <para>nginx configuration is built around a hierarchy of blocks representing http, server and
        location, where each block inherit settings from parent blocks. The following snippet will
        configure nginx to proxy pass (redirect) requests from port 80 (which is the port nginx will
        listen on by default) to our Tomcat instance. Include the following configuration in
        nginx.conf:</para>
      <para><screen>http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  server {
    listen               80;
    root  /home/dhis/tomcat/webapps/ROOT; # Update path!
    client_max_body_size 10M;

    # Serve static files

    location ~ (\.js|\.css|\.gif|\.woff|\.ttf|\.eot|\.ico|(/dhis-web-commons/|/images/|/icons/).*\.png)$ {
      add_header  Cache-Control public;
      expires     14d;
    }

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  http;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
    }
  }
}</screen></para>
      <para>You can now access your DHIS2 instance at <emphasis role="italic">http://localhost</emphasis>. Since the reverse proxy has been set up we can improve
        security by making Tomcat only listen for local connections. In <emphasis role="italic">/conf/server.xml</emphasis> you can add an <emphasis role="italic">address</emphasis>
        attribute with the value <emphasis role="italic">localhost</emphasis> to the Connector
        element for HTTP 1.1 like this:</para>
      <para><screen>&lt;Connector address=&quot;localhost&quot; protocol=&quot;HTTP/1.1&quot; ... &gt;</screen></para>
    </section>
    <section xml:id="install_enabling_ssl_on_nginx">
      <title>Enabling SSL on nginx</title>
      <para>In order to improve security it is recommended to configure the server running DHIS2 to
        communicate with clients over an encrypted connection and to identify itself to clients
        using a trusted certificate. This can be achieved through SSL which is an cryptographic
        communication protocol running on top of TCP/IP. First, install the required <emphasis role="italic">openssl</emphasis> library:</para>
      <screen>sudo apt-get install openssl</screen>
      <para>To configure nginx to use SSL you will need a proper SSL certificate from an SSL provider. The cost of a certificate varies a lot depending on encryption strength. An affordable certificate from <link xl:href="http://www.rapidsslonline.com">Rapid SSL Online</link> should serve most purposes. To generate the CSR (certificate signing request) you can invoke the  command below. When you are prompted for the <emphasis role="italic">Common Name</emphasis>, enter the fully qualified domain name for the site you are securing.</para>
      <screen>openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr</screen>
      <para>When you have received your certificate files (.pem or .crt) you will need to place it
        together with the generated server.key file in a location which is reachable by nginx. A
        good location for this can be the same directory as where your nginx.conf file is
        located.</para>
      <para>Below is an nginx server block where the certificate files are named server.crt and server.key. Since SSL connections usually occur on port 443 (HTTPS) we pass requests on that port (443) on to the DHIS2 instance running on <emphasis role="italic">http://localhost:8080</emphasis> The first server block will rewrite all requests connecting to port 80 and force the use of HTTPS/SSL. This is also necessary because DHIS2 is using a lot of redirects internally which must be passed on to use HTTPS. Remember to replace <emphasis role="italic">&lt;server-ip&gt;</emphasis> with the  IP of your server. These blocks should replace the  one from the previous section.</para>
      <screen>http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  # HTTP server - rewrite to force use of SSL

  server {
    listen     80;
    rewrite    ^ https://&lt;server-url>$request_uri? permanent;
  }

  # HTTPS server

  server {
    listen               443 ssl;
    root  /home/dhis/tomcat/webapps/ROOT; # Update path!
    client_max_body_size 10M;

    ssl                  on;
    ssl_certificate      server.crt;
    ssl_certificate_key  server.key;

    ssl_session_cache    shared:SSL:20m;
    ssl_session_timeout  10m;

    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                RC4:HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;

    # Serve static files

    location ~ (\.js|\.css|\.gif|\.woff|\.ttf|\.eot|\.ico|(/dhis-web-commons/|/images/|/icons/).*\.png)$ {
      add_header  Cache-Control public;
      expires     14d;
    }

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
    }
  }
}</screen>
      <para>Note the last "https" header value which is required to inform the servlet container
        that the request is coming over HTTPS. In order for tomcat to properly produce Location URLs
        using https you also need to add two other parameters to the Connector in tomcat&apos;s
        server.xml file:</para>
      <para><screen>&lt;Connector scheme=&quot;https&quot; proxyPort=&quot;443&quot; ... &gt;</screen></para>
    </section>
    <section xml:id="install_enabling_caching_ssl_nginx">
      <title>Enabling caching and SSL on nginx</title>
      <para>Requests for reports, charts, maps and other analysis-related resources will often take
        some time to respond and might utilize a lot of server resources. In order to improve
        response times, reduce the load on the server and hide potential server downtime we can
        introduce a cache proxy in our server setup. The cached content will be stored in directory
        /var/cache/nginx, and up to 250 MB of storage will be allocated. Nginx will create this
        directory automatically.</para>
      <screen>http {
  # ...
  root              /home/dhis/tomcat/webapps/ROOT; # Update path!
  proxy_cache_path  /var/cache/nginx  keys_zone=dhis:250m  inactive=1d;

  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  <![CDATA[# HTTP server - rewrite to force use of HTTPS

  server {
    listen     80;
    rewrite    ^ https://<server-ip>$request_uri? permanent;
  }

  # HTTPS server

  server {
    listen               443 ssl;
    client_max_body_size 10M;

    ssl                  on;
    ssl_certificate      server.crt;
    ssl_certificate_key  server.key;

    ssl_session_timeout  30m;

    ssl_protocols              SSLv2 SSLv3 TLSv1;
    ssl_ciphers                HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;

    # Serve static files

    location ~ (\.js|\.css|\.gif|\.woff|\.ttf|\.eot|\.ico|(/dhis-web-commons/|/images/|/icons/).*\.png)$ {
      add_header  Cache-Control public;
      expires     14d;
    }

    # Proxy pass to servlet container and potentially cache response

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cache               dhis;
    }
  }]]>
}

</screen>
      <important>
        <para>Be aware that a server side cache shortcuts the DHIS2 security features in the sense
          that requests which hit the server side cache will be served directly from the cache
          outside the control of DHIS2 and the servlet container. This implies that request URLs
          can be guessed and reports retrieved from the cache by unauthorized users. Hence, if you
          capture sensitive information, setting up a server side cache is not recommended.</para>
      </important>
    </section>
    <section xml:id="install_additional_resources_ssl">
      <title>Additional resources on SSL</title>
      <para>The configuration demonstrated above should be regarded as the absolute minumum in order
        to establish a secure server. However, encryption methods are constantly being updated, so
        implementers who are administerting their own server, show ensure that the server is
        regularly updated with recent security patches (particularly the HTTP server and SSL
        libraries). </para>
      <para>There are numerous additional tutorials and information available on the web, including
        a helpful <link xmlns:xlink="http://www.w3.org/1999/xlink"
          xlink:href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04"
          >step-by-step guide</link> for using the free <link
          xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://letsencrypt.org/">Lets
          Encrypt SSL certifcate system</link> . It may also be useful to regularly test your SSL
        security with <link xmlns:xlink="http://www.w3.org/1999/xlink"
          xlink:href="https://www.ssllabs.com/ssltest/">this website</link>.</para>
    </section>
    <section xml:id="install_making_resources_available_with_nginx">
      <title>Making resources available with nginx</title>
      <para>In some scenarios it is desirable to make certain resources publicly available on the Web without requiring authentication. One example is when you want to make data analysis related resources in the Web API available in a Web portal. The following example will allow access to charts, maps, reports, report table and document resources through basic authentication by injecting an <emphasis role="italic">Authorization</emphasis> HTTP  header into the request. It will remove the Cookie header from the request and the Set-Cookie header from the response in order to avoid changing the currently logged in user. It is recommended to create a user for this purpose given only the minimum authorities required. The Authorization value can be constructed by Base64-encoding the username appended with a colon and the password and prefix it &quot;Basic &quot;, more precisely &quot;Basic base64_encode(username:password)&quot;. It will check the HTTP method used for requests and return <emphasis role="italic">405 Method Not Allowed</emphasis> if anything but GET is detected.</para>
      <para>It can be favorable to set up a separate domain for such public users when using this approach. This is because we don&apos;t want to change the credentials for already logged in users when they access the public resources. For instance, when your server is deployed at somedomain.com, you can set a dedicated subdomain at api.somedomain.com, and point URLs from your portal to this subdomain.</para>
      <screen>server {
  listen       80;
  server_name  api.somedomain.com;
    
  location ~ ^/(api/(charts|chartValues|reports|reportTables|documents|maps|organisationUnits)|dhis-web-commons/javascripts|images|dhis-web-commons-ajax-json|dhis-web-mapping|dhis-web-visualizer) {
    if ($request_method != GET) {
      return 405;
    }

    proxy_pass         http://localhost:8080;
    proxy_redirect     off;
    proxy_set_header   Host               $host;
    proxy_set_header   X-Real-IP          $remote_addr;
    proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto  http;
    proxy_set_header   Authorization      &quot;Basic YWRtaW46ZGlzdHJpY3Q=&quot;;
    proxy_set_header   Cookie             &quot;&quot;;
    proxy_hide_header  Set-Cookie;
  }
}</screen>
    </section>
    <section xml:id="install_basic_reverse_proxy_setup_with_apache">
      <title>Basic reverse proxy setup with Apache</title>
      <para>The Apache HTTP server is the most common </para>
      <important>
        <para>Using nginx is the preferred option as reverse proxy with DHIS2 and you should not
          attempt to install both nginx and Apache on the same server. If you have installed nginx
          please ignore this section. </para>
      </important>
      <para>The Apache HTTP server is the most widely used HTTP server currently. Depdenign on your
        exact nature of deployment, you may need to use Apache as a reverse proxy for your DHIS2
        server. In this section, we will describe how to implement a simple reverse proxy setup with
        Apache. </para>
      <para>First we need to install a few necessary programs modules for Apache and enable the modules. </para>
      <para><screen>sudo apt-get install apache2 libapache2-mod-proxy-html libapache2-mod-jk
a2enmod proxy proxy_ajp proxy_connect</screen></para>
      <para>Lets define an AJP connector which Apache HTTP server will use to connect to Tomcat with. The Tomcat <filename>server.xml</filename> file should be located in the /conf/ director of your Tomcat installation. Be sure this line is uncommented.You can set the port to anything you like which is unused.</para>
      <para><screen>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;
</screen>Now, we need to make the adjustments to the Apache HTTP server which will answer requests on port 80 and pass them to the Tomcat server through an AJP connector. Edit the file <filename>/etc/apache2/mods-enabled/proxy.conf</filename> so that it looks like the example below.  Be sure that the port defined in the configuration file matches the one from Tomcat.</para>
      <para><screen>&lt;IfModule mod_proxy.c&gt;

ProxyRequests Off
ProxyPass /dhis  ajp://localhost:8009/dhis
ProxyPassReverse /dhis  ajp://localhost:8009/dhis

&lt;Location &quot;/dhis&quot;&gt;
  Order allow,deny
  Allow from all
&lt;/Location&gt;     
&lt;/IfModule&gt;
</screen></para>
      <para>You now can restart Tomcat and the Apache HTTPD server and your DHIS2 instance should be available on http://<emphasis>myserver</emphasis>/dhis where <emphasis>myserver</emphasis> is the hostname of your server. </para>
    </section>
    <section xml:id="install_ssl_encryption_with_apache">
      <title>SSL encryption with Apache</title>
      <para>Using Apache and the reverse proxy  setup described in the previous section, we can easily implement encrypted transfer of data between clients and the server over HTTPS. This section will describe how to use self-signed certificates, although  the same procedure could be used if you have fully-signed certificates as well. </para>
      <para>First (as root), generate the necessary private key files and CSR (Certificate Signing Request) </para>
      <screen>mkdir /etc/apache2/ssl
cd /etc/apache2/ssl
openssl genrsa -des3 -out server.key 1024
openssl req -new -key server.key -out server.csr</screen>
      <para>We need to remove the password from the key, otherwise Apache will not be able to use it. </para>
      <para><screen>cp server.key server.key.org
openssl rsa -in server.key.org -out server.key</screen></para>
      <para>Next, generate a self-signed certificate which will be valid for one year.</para>
      <screen>openssl x509 -req -days 365 -in server.csr -signkey \ server.key -out server.crt</screen>
      <para>Now, lets configure Apache by enabling the SSL modules and creating a default site.</para>
      <screen>a2enmod ssl
a2ensite default-ssl</screen>
      <para>Now, we need to edit the default-ssl (located at <filename>/etc/apache2/sites-enabled/default-ssl</filename>) file in order to enable the SSL transfer functionality of Apache. </para>
      <para><screen>&lt;VirtualHost *:443&gt;
        ServerAdmin wemaster@mydomain.org
       SSLEngine On
       SSLCertificateFile /etc/apache2/ssl/server.crt
       SSLCertificateKeyFile /etc/apache2/ssl/server.key
...</screen></para>
      <para>Be sure that the *:80 section of this file is changed to port *:443, which is the default SSL port. Also, be sure to change the ServerAdmin to the webmaster&apos;s email. Lastly, we need to be sure that the hostname is setup properly in /etc/hosts. Just under the &quot;localhost&quot; line, be sure to add the server&apos;s IP address and domain name. </para>
      <para><screen>127.0.0.1 localhost
XXX.XX.XXX.XXX foo.mydomain.org</screen></para>
      <para>Now, just restart Apache and you should be able to view https://foo.mydomain.org/dhis. </para>
      <screen>/etc/init.d/apache2 restart</screen>
    </section>
  </section>
  <section xml:id="install_ldap_configuration">
    <title>LDAP configuration</title>
    <para>DHIS2 is capable of using an LDAP server for authentication of users. For LDAP
      authentication it is required to have a matching user in the DHIS2 database per LDAP entry.
      The DHIS2 user will be used to represent authorities / user roles. </para>
    <para>To set up LDAP authentication you need to configure the LDAP server URL, a manager user
      and an LDAP search base and search filter. This configuration should be done in the main DHIS
      2 configuration file (dhis.conf). LDAP users, or entries, are identified by distinguished
      names (DN from now on). An example configuration looks like this:</para>
    <screen># LDAP server URL
ldap.url = ldaps://domain.org:636

# LDAP manager entry distinguished name
ldap.manager.dn = cn=johndoe,dc=domain,dc=org

# LDAP manager entry password
ldap.manager.password = xxxx

# LDAP base search
ldap.search.base = dc=domain,dc=org

# LDAP search filter
ldap.search.filter = (cn={0})</screen>
    <para>The LDAP configuration properties are explained below:<itemizedlist>
        <listitem>
          <para><emphasis role="italic">ldap.url:</emphasis> The URL of the LDAP server for which to
            authenticate against. Using SSL/encryption is strongly recommended in order to make
            authentication secure. As example URL is <emphasis role="italic"
              >ldaps://domain.org:636</emphasis>, where ldaps refers to the protocol, <emphasis
              role="italic">domain.org</emphasis> refers to the domain name or IP address, and
              <emphasis role="italic">636</emphasis> refers to the port (636 is default for
            LDAPS).</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">ldap.manager.dn:</emphasis> An LDAP manager user is required
            for binding to the LDAP server for the user authentication process. This property refers
            to the DN of that entry. I.e. this is not the user which will be authenticated when
            logging into DHIS2, rather the user which binds to the LDAP server in order to do the
            authentication.</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">ldap.manager.password:</emphasis> The password for the LDAP
            manager user.</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">ldap.search.base:</emphasis> The search base, or the
            distinguished name of the search base object, which defines the location in the
            directory from which the LDAP search begins.</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">ldap.search.filter:</emphasis> The filter for matching DNs
            of entries in the LDAP directory. The {0} variable will be substituted by the DHIS2
            username, or alternatively, the LDAP identifier defined for the user with the supplied
            username.</para>
        </listitem>
      </itemizedlist></para>
    <para>DHIS2 will use the supplied username / password and try to authenticate against an LDAP
      server entry, then look up user roles / authorities from a corresponding DHIS2 user. This
      implies that a user must have a matching entry in the LDAP directory as well as a DHIS2 user
      in order to log in.</para>
    <para>During authentication, DHIS2 will try to bind to the LDAP server using the configured
      LDAP server URL and the manager DN and password. Once the binding is done, it will search for
      an entry in the directory using the configured LDAP search base and search filter.</para>
    <para>The {0} variable in the configured filter will be substituted beforing applying the
      filter. By default, it will be substituted by the supplied username. You can also set a custom
      LDAP identifier on the relevant DHIS2 user account. This can be done throught the DHIS2 user
      module user interface in the add or edit screen by setting the "LDAP identifier" property.
      When set, the LDAP identifier will be subsituted for the {0} variable in the filter. This
      feature is useful when the LDAP common name is not suitable or cannot for some reason be used
      as a DHIS2 username.</para>
  </section>
  <section xml:id="install_encryption_setup">
    <title>Encryption setup</title>
    <para>DHIS2 allows for encryption of data. This however requires some extra setup.</para>
      <section xml:id="install_java_cryptography_extension">
        <title>Java Cryptography Extension</title>
        <para>DHIS2 uses an encryption algorithm classified as strong and therefore requires the
          <emphasis>Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy
          Files</emphasis> to be installed. These files can be installed through these steps:
    </para>
    <para>
      <orderedlist>
        <listitem>
          <para>Download the JCE Unlimited Strength Jurisdiction Policy Files for your java version
            of Java from the Oracle Web site. Scroll down to the "Java Cryptography Extension (JCE)
            Unlimited Strength Jurisdiction Policy Files" section. It is important that the version
            of the files match the version of Java on your server.</para>
          <para><link xl:href="http://www.oracle.com/technetwork/java/javase/downloads/index.htm"
              >http://www.oracle.com/technetwork/java/javase/downloads/index.html</link></para>
        </listitem>
        <listitem>
          <para>Extract the downloaded ZIP archive. It contains two JAR files: <emphasis
              role="italic">local_policy.jar</emphasis> and <emphasis role="italic"
              >US_export_policy.jar</emphasis>.</para>
        </listitem>
        <listitem>
          <para>Locate the JDK directory of your Java installation. From there, navigate into the
              <emphasis role="italic">jre/security</emphasis> directory. On Ubuntu it is often found
            at <emphasis role="italic"
            >/usr/lib/jvm/java-8-oracle/jre/lib/security</emphasis>.</para>
        </listitem>
        <listitem>
          <para>(Optional) Back up your existing <emphasis role="italic">local_policy.jar</emphasis>
            and <emphasis role="italic">US_export_policy.jar</emphasis> in case you want to revert
            to them later.</para>
        </listitem>
        <listitem>
          <para>Copy the <emphasis role="italic">local_policy.jar</emphasis> and <emphasis
              role="italic">US_export_policy.jar</emphasis> files into the security folder. You
            should now have the following files which completes the installation. Remember to
            restart your servlet container for it to take
            effect.<screen>/usr/lib/jvm/java-8-oracle/jre/lib/security/local_policy.jar
/usr/lib/jvm/java-8-oracle/jre/lib/security/US_export_policy.jar</screen></para>
        </listitem>
      </orderedlist>
    </para>
    </section>
    <section xml:id="install_password_configuration">
      <title>Password configuration</title>
      <para>To provide security to the encryption alogorithm you will have to set a password in the
          <emphasis role="italic">dhis.conf</emphasis> configuration file through the <emphasis
          role="italic">encryption.password</emphasis>
        property:<screen>encryption.password = xxxx</screen></para>
      <para>The password must be at least <emphasis role="bold">24 characters long</emphasis> and it
        is recommended to use a mix of numbers and lower- and uppercase letters. The encryption
        password must be kept secret.</para>
    </section>
    <section xml:id="install_considerations_for_encryption">
      <title>Considerations for encryption</title>
      <para><emphasis role="italic">A word of caution:</emphasis> It is not possible to recover
        encrypted data if the encryption password is lost or changed. Conversely, the encryption
        provides no security if the password is compromised. Hence, great consideration should be
        given to storing the password in a safe place.</para>
    </section>
  </section>
  <section xml:id="install_dhis2_configuration_reference">
    <title>DHIS2 configuration reference</title>
    <para>The following describes the full set of configuration options for the <emphasis
        role="italic">dhis.conf</emphasis> configuration file. The uncommented properties are
      mandatory. The commented properties are optional. The configuration file should be placed in a
      directory which is pointed to by a <emphasis role="italic">DHIS2_HOME</emphasis> environment
      variable. The comment (#) must be removed for a property value to take effect. You can copy
      and paste the following content as a viable starting point for your own configuration
      file.<screen># ----------------------------------------------------------------------
# Database connection for PostgreSQL
# ----------------------------------------------------------------------

# Hibernate SQL dialect
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

# JDBC driver class
connection.driver_class = org.postgresql.Driver

# Database connection URL
connection.url = jdbc:postgresql:dhis2

# Database username
connection.username = dhis

# Database password (sensitive)
connection.password = xxxx

# Database schema behavior, can be 'validate', 'update', 'create', 'create-drop'
connection.schema = update

# Max size of connection pool (default: 40)
# connection.pool.max_size = 40

# ----------------------------------------------------------------------
# System
# ----------------------------------------------------------------------

# System mode for database read operations only, can be 'off', 'on'
# system.read_only_mode = off

# ----------------------------------------------------------------------
# Encryption
# ----------------------------------------------------------------------

# Encryption password (sensitive)
# encryption.password = xxxx

# ----------------------------------------------------------------------
# File store
# ----------------------------------------------------------------------

# File store provider, currently 'filesystem' and 'aws-s3' are supported
# filestore.provider = filesystem

# Directory / bucket name, refers to folder within DHIS2_HOME on file system, 'bucket' on AWS S3
# filestore.container = files

# Datacenter location (not required)
# filestore.location = eu-west-1

# Public identity / username
# filestore.identity = dhis2-id

# Secret key / password (sensitive)
# filestore.secret = xxxx

# ----------------------------------------------------------------------
# LDAP
# ----------------------------------------------------------------------

# LDAP server URL
# ldap.url = ldaps://300.20.300.20:636

# LDAP manager user distinguished name
# ldap.manager.dn = cn=JohnDoe,ou=Country,ou=Admin,dc=hisp,dc=org

# LDAP manager user password (sensitive)
# ldap.manager.password = xxxx

# LDAP entry distinguished name search base
# ldap.search.base = dc=hisp,dc=org

# LDAP entry distinguished name filter
# ldap.search.filter = (cn={0})</screen></para>
  </section>
  <section xml:id="install_application_logging">
    <title>Application logging</title>
    <para>The DHIS2 application log output is directed to multiple files and locations. First, log
      output is sent to standard output. The Tomcat servlet container usually outputs standard
      output to a file under "logs":<screen>&lt;tomcat-dir>/logs/catalina.out</screen></para>
    <para>Second, log output is written to a "logs" directory under the DHIS2 home directory as
      defined by the the DHIS2_HOME environment variables. There is a main log file for all output,
      and separate log files for various background processes. The main file includes the background
      process logs as well. The log files are capped at 50 Mb and log content is continuously
      appended.<screen>&lt;DHIS2_HOME>/logs/dhis.log

&lt;DHIS2_HOME>/logs/dhis-analytics-table.log

&lt;DHIS2_HOME>/logs/dhis-data-exchange.log

&lt;DHIS2_HOME>/logs/dhis-data-sync.log</screen></para>
    <para>In order to override the default logging you can specify a Java system property with the
      name <emphasis role="italic">log4j.configuration</emphasis> and a value pointing to the Log4j
      configuration file on the classpath. If you want to point to a file on the file system (i.e.
      outside Tomcat) you can use the <emphasis role="italic">file</emphasis> prefix e.g. like
      this:<screen>-Dlog4j.configuration=file:/home/dhis/config/log4j.properties</screen></para>
    <para>Java system properties can be set e.g. through the <emphasis role="italic"
        >JAVA_OPTS</emphasis> environment variable.</para>
    <para>DHIS2 will eventually phase out logging to standard out / catalina.out and as a result it
      is recommended to rely on the logs under DHIS2_HOME.</para>
  </section>
  <section xml:id="install_working_with_the_postgresql_database">
    <title>Working with the PostgreSQL database</title>
    <para>Common operations when managing a DHIS2 instance are dumping and restoring databases. To
      make a dump (copy) of your database, assuming the setup from the installation section, you can
      invoke the following: </para>
    <screen>pg_dump dhis2 -U dhis -f dhis2.sql</screen>
    <para>The first argument (dhis2) refers to the name of the database. The second argument (dhis)
      refers to the database user. The last argument (dhis2.sql) is the file name of the copy. If
      you want to compress the file copy immediately you can do:</para>
    <screen>pg_dump dhis2 -U dhis | gzip &gt; dhis2.sql.gz</screen>
    <para>To restore this copy on another system, you first need to create an empty database as
      described in the installation section. You also need to gunzip the copy if you created a
      compressed version. You can the invoke:</para>
    <screen>psql -d dhis2 -U dhis -f dhis2.sql</screen>
  </section>
  <section xml:id="install_dhis2_live_setup">
    <title>DHIS2 Live setup</title>
    <para>The DHIS2 Live package is extremely convenient to install and run. It is intended for
      demonstrations, for users who want to explore the system and for small, offline installations
      typically at districts or facilities. It only requires a Java Runtime Environment and runs on
      all browsers except Internet Explorer 7 and lower.</para>
    <para>To install start by downloading DHIS2 Live from <emphasis role="italic"
        >http://dhis2.org</emphasis> and extract the archive to any location. On Windows click the
      executable archive. On Linux invoke the startup.sh script. After the startup process is done
      your default web browser will automtically be pointed to <emphasis role="italic"
        >http://localhost:8082</emphasis> where the application is accessible. A system tray menu is
      accessible on most operating systems where you can start and stop the server and start new
      browser sesssions. Please note that if you have the server running there is no need to start
      it again, simply open the application from the tray menu.</para>
    <para>DHIS2 Live is running on an embedded Jetty servlet container and an embedded H2 database.
      However it can easily be configured to run on other database systems such as PostgreSQL.
      Please read the section above about server installations for an explanation of the database
      configuration. The <emphasis role="italic">dhis.conf</emphasis> configuration file is located
      in the <emphasis role="italic">conf</emphasis> folder. Remember to restart the Live package
      for your changes to take effect. The server port is 8082 by default. This can be changed by
      modifying the value in the<emphasis role="italic"> jetty.port</emphasis> configuration file
      located in the <emphasis role="italic">conf</emphasis> directory.</para>
  </section>
</chapter>
